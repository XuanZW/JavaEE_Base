[TOC]

#将近2周的学习汇总下:

1. 八个基本数据类型:
byte(-128~127,默认0), short(2字节,默认0), int(4字节默认0), long(8字节,默认0), float(4字节,默认0.0), double(8字节,默认0.0), char(2字节默认\u0000), boolean(一字节,默认false)

2.运算符:

& 和 |:所有条件都会判断
&& 和 ||: 前面的判断条件得出结论后面的条件不会再判断

3.0java命名规范:字母数字_,$,不能用关键字命名


方法重载:方法名相同,方法参数的类型和数量不同,与返回值无关
构造方法:方法名于类名相同,权限只能是 public, private, protected,不能用static修饰
没有定义有参构造方法时系统会默认提供无参的构造方法.定义了就不会提供无参构造,要自己定义.

4.0 权限

1、类的权限修饰符有两个：public, or package-private (no explicit modifier).

    当一个类申明为public时，它对任何地方的类都是可见的。

    当一个类没有申明权限时，即默认设为package-private,它只对在自己的包内的所有类可见。

2、类中成员的权限修饰符有：public, private, protected, or package-private (no explicit modifier).

    当成员申明为public时，它对任何地方的类都是可见的。

    当成员没有申明权限时，即默认设为package-private,它只对在自己的包内的所有类可见。

    当成员申明为private时，它只对本类是可见的。

    当成员申明为protected时，除了对自己所在的包内所有类是可见的还对其他包内的本类的子类是可见的。

3、成员的权限修饰符访问权限

5.0  Tread 和 Runable 以及 Callable

Callable的调用过程:
                               Thread启动
 callableImpl实现类 ->callable接口->FutureTask ->RunnableFuture ->Future    ->Runnable

可以用callableImpl 里面重写call方法,类似于run()重写
然后用类似于runnableImpl的启动方式,通过Thread执行线程
new Thread(new FutureTask<>(new MyThread())).start();
2者调用方法类似,但是callable有返回值,runable没有

6.0hashmap HashTable hashcode()详解


7 抽象类和接口不同
相同点：
接口和抽象类都不能用于创建实例，接口和抽象类中都有抽象方法；

不同点:
1.抽象类可以有构造方法，接口中不能有构造方法。 
2.接口中定义的变量只能是public static final类型。抽象类不一定 
3.接口中所有方法必须都是抽象的。抽象类中可以包含非抽象的普通方法 
4.接口中的抽象方法只能是public，并且默认为public abstract类型,抽象类中的抽象方法的访问类型可以是public, protected，但。 
5.抽象类中可以包含静态方法，接口中不能有。 
6.一个类可以实现多个接口，但只能继承一个抽象类。

Jdk1.8之后:有了默认方法
 default void test() {....
	}

8.Integer: 
Integer n0 = 3;
		Integer n1 = new Integer(3);
		int n3 = 3;
//对于
Integer n0 = 3
            Integer n4 = 3;
  对于Integer 的对象在new或者直接等于一个数字时,只要这2个的数值在-128 ~ 127之间就是直接指向同一个缓存数组(这个数组在Integer类加载的时候就存在了),
所以判断相等:true
如果超过这个范围,就会产生2个新的引用指向自己的内存空间,则会是false

  Integer.valueof(object i)这个方法当里面参数是int时,返回一个新的Integer对象 return new Integer(i);
如果是其他类型会去调用parseint()方法转为int,然后在去调用一次本身
(注意这里Integer.valueof也遵循上面的缓存数组大小原则,在范围内就指向同一个地址,如果超过了就再去返回新的return new Integer(i),这里就是新的对象了)
Integer.valueof(int),返回一新的integer对象

		System.out.println(n0 == n3);//true
		System.out.println(n0 == n1);//false
		System.out.println(n3 == n1);//true
这里体现自动装箱拆箱的机制
当int 和Integer对比时Integer会拆箱转为int,对比为true;
2个Integer对比时就要比较引用地址是否相等.



9.hashcode特点:
（1）HashCode的存在主要是用于查找的快捷性.经常用于确定对象的存储地址，如Hashtable，HashMap等，HashCode。
（2）如果两个对象相同，?equals方法一定返回true，并且这两个对象的HashCode一定相同。
（3）两个对象的HashCode相同，并不一定表示两个对象就相同，即equals()不一定为true，只能够说明这两个对象在一个散列存储结构中。
（4）如果对象的equals方法被重写，那么对象的HashCode也尽量重写。
 HashCode作用
equals方法可用于保证元素不重复，但如果每增加一个元素就检查一次，若集合中现在已经有1000个元素，那么第1001个元素加入集合时，就要调用1000次equals方法。这显然会大大降低效率。?于是，Java采用了哈希表的原理。

哈希算法也称为散列算法，是将数据依特定算法直接指定到一个地址上。

这样一来，当集合要添加新的元素时，先调用这个元素的HashCode方法，就一下子能定位到它应该放置的物理位置上。

（1）如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了。

（2）如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了。

（3）不相同的话，也就是发生了Hash key相同导致冲突的情况，那么就在这个Hash key的地方产生一个链表，将所有产生相同HashCode的对象放到这个单链表上去，串在一起（很少出现）。

这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。

如何理解HashCode的作用：

从Object角度看，JVM每new一个Object，它都会将这个Object丢到一个Hash表中去，这样的
话，下次做Object的比较或者取这个对象的时候（读取过程），它会根据对象的HashCode再
从Hash表中取这个对象。这样做的目的是提高取对象的效率。若HashCode相同再去调用equal
10.0 service 和 intentService
  1.startService启动方式过程及生命周期：
onCreate()–> onStartCommand()/onStart() —> onDestory();

1）创建服务onCreate()在整个生命周期仅执行一次，每次调用服务都会执行onStart()或onStartCommand();

2）停止服务onDestory()在整个生命周期仅执行一次；

3）服务一旦启动，生命周期将不受限于UI线程。应用（Activity）终止，服务仍然在后台运行；

4）直接启动的服务，其它应用不能调用其中的功能。

2.bindService绑定方式过程及生命周期：
onCreate() —> bindService/onBind —> unbindService/onUnbind–> onDestory();
两种启动方式区别：
1.生命周期调用的方法不一样

2.与Activity 生命周期的关系 ：
startService开启服务以后，与activity就没有关联，不受影响，独立运行。ServiceConnection ；bindService开启服务以后，与activity存在关联，退出activity时必须调用unbindService方法，否则会报ServiceConnection泄漏的错误。
IntentService
IntentService 是继承自 Service 并处理异步请求的一个类，在 IntentService 内有一个工作线程来处理耗时操作，当任务执行完后，IntentService 会自动停止，不需要我们去手动结束。如果启动 IntentService 多次，那么每一个耗时操作会以工作队列的方式在 IntentService 的 onHandleIntent 回调方法中执行，依次去执行，执行完自动结束。


11.Arrays.sort()重写
Comparator compareTo 方法重写 ,在一个类中直接实现接口
Comparator compare 在一个类写好后重写写一个类(Testcopare))继承并重写方法 调用Arrays.sort(p1,new Testcopare)

12.多线程相关的概念
进程是程序在计算机上的一次执行活动
线程是可执行代码的可分派单元。

1. synchronized原理
在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存
在,当我们调用某对象的synchronized方法时，就获取了该对象的同步锁。

2. synchronized基本规则
在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存在。

第一条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的该“synchronized方法”或者“synchronized代码块”的访问将被阻塞。
注意:::是对同一个对象的访问同步锁才会实现互斥操作

第二条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized

代码块”时，其他线程仍然可以访问“该对象”的非同步代码块。其他线程对“该对

象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞

To be continnue...

* 代码块: 使用{}括起来的代码成为代码块
    * 静态代码块: 在类中的成员位置，用{}括起来的代码，只不过它用static修饰
    * 构造代码块: 在类中的成员位置，用{}括起来的代码。每次调用构造方法执行前，都会先执行构造代码块。可以把多个构造方法的共同代码放在一起
    * 局部代码块: 局部位置，用于限定变量的生命周期
* 静态代码块、构造代码块、构造方法的执行顺序
    * 静态 -> 构造代码块 -> 构造方法
    * 静态代码块：只执行一次
    
* `this` 与 `super` 的区别

    |比较项|`this`|`super`|
    |:-|:-|:-|
    |定义|本类对象|父类对象|
    |使用|本类属性、方法、对象|父类属性、方法|
    |查找范围|先从本类查找，找不到去父类查找|直接去父类查找|
    |特殊点|`this`代表当前对象||
* `static` 关键字
    * static保存的位置在全局数据区中也叫类空间中
    * 在静态方法中不允许调用非静态方法或非静态全局变量
* `final` 关键字: 在Java中表示终结器的概念，可以定义类、方法及属性，被`final`修饰的类不能被继承、修饰方法不能被覆写、修饰属性不能被修改（常量）
* 方法的多态
    * 方法的重载
    * 方法的覆写: 名称、参数类型及个数、返回值与父类完全相同，访问权限不能比父类更严格
* 对象的多态
    * 向上转型: 统一标准，使用的方法向父类对齐
    * 向下转型: 子类可以使用自己独特的方法
    * 限制：向下转型必须先向上转型（即创建时发生了自动向上转型）
* `instanceof` 关键字: 判断某个对象是否是其或其子类的实例

* 工厂设计模式: 类与类之间是存在依赖关系的，依赖关系造成耦合度提高，实现解耦的方式就是使用工厂模式
    ```java
    public class TestFactory {
        public static void main(String[] args) {
            Fruit f = FruitFactory.getInstance(args[0]);
            if(f!=null) {
                f.eat();
            } else {
                System.out.println("The fruit is not exists...");
            }
        }
    }
    interface Fruit {
        public void eat();
    }
    class Apple implements Fruit {
        @Override
        public void eat() {
            System.out.println("eat apple...");
        }
    }
    class Pear implements Fruit {
        @Override
        public void eat() {
            System.out.println("eat pear...");
        }
    }
    class FruitFactory {
        public static Fruit getInstance(String name) {
            switch(name) {
                case "apple":
                    return new Apple();
                case "pear":
                    return new Pear();
                default:   
                    return null;
            }
        }
    }
    ```

* 异常处理
    * 异常处理的一般结构
    ```java
    try{
        // 可能会出现异常的代码
    } catch (NullPointerExcetion e) { // 声明具体的异常类型
        // 对 NullPointerExcetion异常的处理
    } catch(Exception e) { // 可以多层catch异常
        // 对 Exception异常的处理
    } finally {
        // 无论程序正常运行、出现异常或被打断
        // 都一定会执行的代码段
    }
    ```
    * 异常的继承结构
        * `Throwable`
            * `Error`: 表示JVM程序出错，不能被处理的异常
            * `Exception`: 程序中的异常，可以被处理
    * `throws`关键字: 作用于方法，将异常交给调用处处理
    * `throw`关键字: 作用于程序中，抛出某种异常，程序检测到某种异常，需要被处理
    * 注意: 只能在代码中忽略(不处理)`RuntimeException(及其子类)`类型的异常，编译器强制要求对其他类型的处理。
        * 无法预估的错误，比如传递了一个null引用
        * 代码中的错误，比如数组越界
    * 自定义异常
* 包
    * 使用包的目的: 为文件进行分离，相当于操作系统中的文件夹
    * 定义包: `package *(反顺序域名).*(项目名称).*(层次名)`
    * 导入包: 
        * `import *(包名).*(类名)` 
        * `import *(包名).*` 导入该包下所有类
        * 在使用中可以使用全名直接使用该类(一般为解决同名冲突使用)，如`java.util.ArrayList list = new java.util.ArrayList();`
    * 包的访问权限

    ||`public`|`default`|`protected`|`private`|
    |:-:|:-:|:-:|:-:|:-:|
    |本类|✔|✔|✔|✔|
    |不同包的子类|✔|✔|✔|✘|
    |同一包的不同类|✔|✔|✘|✘|
    |不同包的非子类|✔|✘|✘|✘|
    * 命名规范: 反顺序的域名.项目名

常用的工具类
* `StringBuilder` 和 `StringBuffer`(同时继承于`AbstractStringBuilder`)
    * `StringBuilder`线程不安全，如果局部使用，不存在多线程访问，不会有问题，速度较快
    * `StringBuffer`线程安全，在所有添加方法上使用了`synchronized`关键字
    * 实例:
    ```java
    class A extends Thread {
        private StringBuilder builder;
        private StringBuffer buffer;
        public A(StringBuilder builder, StringBuffer buffer) {
            this.builder = builder;
            this.buffer = buffer;
        }
        public void run() {
            for(int i=0; i<100; i++) {
                builder.append('d');
                buffer.append('d');
                try {
                    Thread.sleep(10);
                } catch(InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("[" + Thread.currentThread().getName() + "] builder:" + builder.length());
            System.out.println("[" + Thread.currentThread().getName() + "] buffer:" + buffer.length());
        }
        public static void main(String[] args) {
            // 测试，多线程同时向 builder 和 buffer 中拼接字符串，最终查看拼接长度
            StringBuilder builder = new StringBuilder();
            StringBuffer buffer = new StringBuffer();
            for(int i=0; i<10; i++) {
                new A(builder, buffer).start();
            }
        }
    }
    ```
* `Runtime`: 是一个单例，需要通过`getRuntime()`获取实例
    * `maxMemory()`: 获取JVM最大可用空间。Returns the maximum amount of memory that the Java virtual machine will attempt to use.
    * `totalMemory()`: 获取当前JVM的总空间。Returns the total amount of memory in the Java virtual machine.
    * `freeMemory()`: 获取当前JVM的空闲空间。Returns the amount of free memory in the Java Virtual Machine.
    * `gc()`: 显式调用gc开始工作。Runs the garbage collector.
* `System`: 系统类
    * `in`: The "standard" input stream.
    * `out`: The "standard" output stream.
    * `err`: The "standard" error output stream.
    * `arraycopy()`: Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array.
    * `currentTimeMillis()`: Returns the current time in milliseconds.
    * `exit()`: Terminates(终止) the currently running Java Virtual Machine.
    * `getenv()`: 获取系统环境变量，可以指定获取或全部获取。Returns an unmodifiable string map view of the current system environment. | Gets the value of the specified environment variable.
* `Date`: 日期类
* `SimpleDateFormat`: 日期格式化
    * `Date`格式化为字符串: `format()`
    * 字符串格式化为`Date`: `parse()`
* `Random`: 随机数
* `UUID`: 随机字符串
* `Math`: 数学工具类
* `BigInteger`: 大整数
* `BigDecimal`: 对超过16位有效位(小数点后16位)的数进行精确运算
* `Comparable`: 比较器接口，在类内部实现
* `Comparator`: 比较器接口，在类外部实现
* `Cloneable`: 对象克隆，覆写`clone()`方法，并提升访问权限

 多线程和lambda表达式
#### 进程与线程的区别
线程是在进程的基础上进一步划分，一个进程可以存在多个线程，而线程是可以同步运行的

#### 多线程的优点
效率高: 可以最大限度的利用CPU的空闲资源，比如一遍编辑文档，一边打印文档中的内容

#### 如何使用多线程
* 继承`Thread`类，在Java中编写多线程程序的时候必须存在一个线程的主体类，而这个主体类只要继承了`Thread`类，并覆写`run()`方法就可以完成多线程的功能
    ```java
    class ThreadDemo extends Thread {
        @override
        public void run() {
            System.out.println("Hello multi-thread...");
        }
    }
    /** 测试方法 */
    ThreadDemo thread = new ThreadDemo();
    thread.start();
    ```
* 实现`Runnable`接口，主体类实现`run()`方法，并使用主体类构造`Thread`类。
    ```java
    /** 测试方法，Runnable使用lambda实现 */
    Runnable runnable = () -> {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("over");
    };
    new Thread(runnable).start();
    ```
* 实现`Callabel`接口，主体类实现`call()`方法，并使用主体类构造`FutureTask`类，最后将`FutureTask`类用于构造`Thread`类。在实现多线程的同时，可以接收返回结果，返回结果由`FutureTask`调用`get()`获取。
    ```java
    class MyThread implements Callable<String> {
        @Override
        public String call() throws Exception {
            for(int i=0; i<10; i++) {
                System.out.println("running " + i);
            }
            Thread.sleep(2000);
            return "over";
        }
    }
    /** 测试程序 */
    FutureTask<String> ft = new FutureTask<String>(new MyThread());
    new Thread(ft).start();
    System.out.println(ft.get()); // 会阻塞进程，等待线程返回
    ```

#### `start()`和`run()`启动线程的区别
`run()`方法不能真正启动一个线程，而只是单纯的运行了`run()`方法中的代码，而想要真正启动一个线程，需要调用`start()`方法。
* 测试例:
    ```java
    Runnable run1 = () -> {
        while(true)
            System.out.println("hhhhhhhhh");
    };
    Runnable run2 = () -> {
        while(true)
            System.out.println("ggggggggg");
    };
    new Thread(run1).run();
    new Thread(run2).run(); // 顺序执行，由于死循环使得本语句不会被执行

    // new Thread(run1).start();
    // new Thread(run2).start(); // 两线程争夺CPU，随机执行
    ```
* `start()`方法的源码
    ```java
    public synchronized void start() {
        /**
         * This method is not invoked for the main method thread or "system"
         * group threads created/set up by the VM. Any new functionality added
         * to this method in the future may have to also be added to the VM.
         *
         * A zero status value corresponds to state "NEW".
         */
        if (threadStatus != 0)
            throw new IllegalThreadStateException();

        /* Notify the group that this thread is about to be started
         * so that it can be added to the group's list of threads
         * and the group's unstarted count can be decremented. */
        group.add(this);

        boolean started = false;
        try {
            start0();
            started = true;
        } finally {
            try {
                if (!started) {
                    group.threadStartFailed(this);
                }
            } catch (Throwable ignore) {
                /* do nothing. If start0 threw a Throwable then
                  it will be passed up the call stack */
            }
        }
    }
    ```
    * 可以发现`start()`方法仅能被调用一次，多次调用会抛出`IllegalThreadStateException`异常
    * `start()`会将本线程加入线程组，并调用本地系统函数`start0()`
    * 线程进入就绪状态，只要获得CPU分配的时间片就可以开始执行
    * 流程如下图
    ![start调用](./第二周/start调用.png)

#### 使用Runnable有优势
* 避免Java单继承的局限
* 更好地实现资源共享，多线程处理同一资源

#### lambda表达式
* 简介: 在JDK1.8之后增加的新特性，通过`lambda`表达式实现函数式编程
* 要求: 一个接口或一个类只有一个抽象方法
* 用法实例:
    ```java
    interface Print {
        // 有参无返回值
        public void print(String msg);
    }
    interface Calc {
        // 有参有返回值
        public int add(int a, int b);
    }
    interface IMessage {
        // 无参无返回值
        public void send();
    }
    public class TestLambda {
        public static void main(String[] args) {
            // 有参无返回值(只有一行函数体时可以省略{})
            Print print = (String msg) -> System.out.println(msg);
            // 有参有返回值
            Calc calc = (int a, int b) -> {
                return a + b;
            };
            IMessage msg = () -> {
                System.out.println("send message...");
            };
            
            print.print("有参无返回值");
            System.out.println(calc.add(1, 2));
            msg.send();
        }
    }
    ```
#### Callable接口与Runnable接口的区别？
* `Callable`可以返回一个泛型，而`Runnable`无返回值
* `Callable`可以抛出`Exception`异常，而`Runnable`不可以
* `Runnable`从1.0就有了，而`Callable`在1.5之后才出现
* `Runnable`和`Callable`都可用于`Executors`，但`Thread`仅支持`Runnable`

#### 线程的状态
1. __新建(New)__ 线程刚刚创建，分配系统资源
2. __就绪(Runnable)__ 新建后的线程已获得运行所需的系统资源，经`start()`调用后进入此状态，或被阻塞的线程停止阻塞，或者运行状态的线程用完了CPU分配给其时间片
3. __运行(Running)__ 就绪状态的线程获得CPU分配的时间片进入此状态
4. __阻塞(Block)__ 由于`sleep()`或`wait()`或`I/O`或同步锁的原因运行中的线程进入阻塞状态
5. __死亡(Dead)__ 线程运行完毕或因异常导致退出执行函数

![线程的状态](./第二周/线程状态.png)

#### 线程的常用操作
* 线程的命名与取得
    * 取得当前线程的方法: `public static native Thread currentThread();`
    * 命名
        * 构造方法设置: `public Thread(String name)` | `public Thread(ThreadGroup group, String name)` | `public Thread(Runnable target, String name)` | `public Thread(ThreadGroup group, Runnable target, String name)` | `public Thread(ThreadGroup group, Runnable target, String name, long stackSize)`
        * `public final void setName(String name);`
    * 获取线程名: `public final String getName();`
* 线程的休眠
    * `public static native void sleep(long millis) throws InterruptedException;`
    * `TimeUnit.SECCOND(还有其他单位).sleep(long timeout)`
* 线程的中断
    * 检测是否被中断: `public static boolean interrupted()` | `public boolean isInterrupted()`
    * 发起中断: `public void interrupt()`
    * 检测是否处于中断状态并修改状态位: `private native boolean isInterrupted(boolean ClearInterrupted);`
* 线程的强制执行
    * 当一个线程满足条件后，会一直占用资源直到执行完毕。
    * 使用方法`public final void join() throws InterruptedException`
    * 范例:
    ``` java
    Thread thread1 = new Thread(() -> {
        for(int i=0; i<100; i++) {
            System.out.println(Thread.currentThread().getName() + " " + i);
        }
    }, "凶猛的撒旦");

    Thread thread2 = new Thread(() -> {
        for(int i=0; i<100; i++) {
            if(i == 3) {
                try {
                    thread1.join();
                } catch(InterruptedException e) {
                    System.out.println("撒旦被大天使带走了...");
                }
            }
            System.out.println(Thread.currentThread().getName() + " " + i);
        }
    }, "待宰的羔羊");

    thread2.start();
    thread1.start();
    ```
* 线程的礼让，调用方法`public static native void yield();`
* 线程的优先级，理论上来说谁的优先级高谁就先执行，但是在线程中优先级也是一个叫做相对的概念，而不是绝对的。优先级高的线程在抢占CPU资源时成功的概念率更大些，但最终能不能抢占成功也不一定。
    * 查看优先级: `public final int getPriority()`
    * 设置优先级: `public final void setPriority(int newPriority)`
    * 参数
        * `Thread.MAX_PRIORITY` 最高(10)
        * `Thread.NORM_PRIORITY` 中等、默认(5)
        * `Thread.MIN_PRIORITY` 最低(1)

同步、死锁、队列和【生产者和消费者问题】
#### 同步和异步
* 同步：同一时间只能有一个线程在操作资源，剩下的线程只能等待上一个线程操作完毕之后在进行资源的操作
* 异步：多个线程对象可以同一时间对资源进行访问
* 性能上区别
    * 同步：由于每个线程只能单独进行资源的操作，所以效率不高
    * 异步：异步处理由于多个线程可以同时进行资源的访问，效率很高，但是不安全

#### `synchronized`实现同步锁
* 同步代码块
    ``` java
    // this 可以修改为需要设置同步锁的对象
    synchronized (this) {
        // synchronized codes
    }
    ```
* 同步方法
    ``` java
    // 同步方法为获取本对象的锁
    public synchronized void method() {
        // synchronized codes
    }
    ```

#### 死锁
线程死锁表示两个线程互相等待对方执行的过程，造成程序中假死现象

#### 数据结构——队列
* 队列的特点【先进先出】：只能在一端进行插入，另一端进行删除。在插入端叫做队尾，删除端叫做队头
* 常用方法
    * `add()`: 入队，队尾插入元素
    * `remove()`: 出队，队头删除元素
    * `peek()`: 获取队头元素，不删除
    * `isEmpty()`: 队列是否为空

#### 线程的等待和唤醒
* 等待：`wait()`或`wait(long timeout)`
* 唤醒：`notify()`或`notifyAll()`
* __注意：__ 这些方法必须在同步方法或同步代码块中

#### 卖票示例(teacher)
``` java
import java.util.LinkedList;
import java.util.Queue;

public class Tickets {

    public static void main(String[] args) {
        
        WindowQueue queue=new WindowQueue();
        
		Producer p=new Producer(queue);
		Consumer con=new Consumer(queue);
		//以上的代码一定要注意 传入的是同一个对象
		
		Thread t1=new Thread(p);
		Thread t2=new Thread(con);
		
		t1.start();
		t2.start();
    }
}

/** 卖票的窗口 */
class WindowQueue { 

	//定义卖票队列
	int maxSize=10;
	Queue<Integer> queue = new LinkedList<Integer>();
	int num=0; //最多卖100张票
	boolean flag=true ; //判断是否继续卖票
	
	//排队买票
	public synchronized void producer()throws Exception{
		if(this.queue.size()<maxSize) {
			this.queue.add(num++); //等待买票的数量++
			System.out.println("第"+num+"个客户排队买票");
			this.notifyAll(); //唤醒等待的线程
		} else {
			System.out.println("队列已满 请等待");
			this.wait(); 
		}
	}
	
	//卖票
	public synchronized void consumer()throws Exception{
		if(this.queue.size() > 0) {
			int temp = this.queue.remove();//出队
            System.out.println("第"+(temp+1)+"个客户买到票离开队列");
            
			//如果当前的队列为空 并且卖出票数大于100
			if(this.queue.isEmpty()&&this.num>=100) {
				this.flag=false;
			}
			this.notifyAll(); //唤醒等待的线程
		}else {
			
			System.out.println("队列已空 请等待(没有的买票的人，去哪卖票呢？)");
			this.wait();
		}
	}
}

/** 买票处理 */
class Producer implements Runnable{

	WindowQueue queue;
	
	public Producer(WindowQueue queue) {
		
		this.queue=queue;
	}
	
	@Override
	public void run() {
		while(queue.num<100) {  //必须小于100张票 才可以买票
            try {
                Thread.sleep(1000);
                queue.producer();
            } catch (Exception e) {
                e.printStackTrace();
            }
		}
	}

}

/** 卖票处理 */
class Consumer implements Runnable{
	
	WindowQueue queue;
	
	public Consumer(WindowQueue queue) {
		this.queue=queue;
    }
    
	@Override
	public void run() {
		while(queue.flag) {  //如果队列为空 并且票数大于100 就不会卖票了
			try {
				Thread.sleep(1000);
				queue.consumer();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}
```

#### 卖票示例(personal)
``` java
import java.util.LinkedList;
import java.util.Queue;

public class MyTickets {
    public static void main(String[] args) {

        TicketWindow window = new TicketWindow();
        
        new Thread(new Producer(window)).start();
        new Thread(new Consumer(window)).start();


    }
}

class TicketWindow {
    private int ticketNums = 100;
    private int no = 0;
    private int hadSale = 0;
    private Queue<Integer> queue = new LinkedList<Integer>();
    private int maxQueueNum = 10;

    public synchronized void producer() throws InterruptedException {
        if(queue.size() <= maxQueueNum) {
            queue.add(++no);
            System.out.println("第" + no + "个人开始排队");
            this.notifyAll();
            if(!this.haveTicket()){
                saleOut();
            }
        } else {
            System.out.println("排队的人够多了，等会儿再排...");
            this.wait();
        }
    }

    public synchronized void consumer() throws InterruptedException {
        if(this.queue.size() > 0) {
           if(this.hadSale < this.ticketNums) {
               System.out.println("第"+ queue.poll() +"个人买到票走了");
               hadSale++;
               this.notifyAll();
               
               if(!this.haveTicket()){
                    saleOut();
               }
           } else {
                saleOut();
           }
        } else {
            System.out.println("窗口空闲了，等人来买票...");
            this.wait();
        }
    }

    public synchronized boolean haveTicket() {
        return this.ticketNums > this.hadSale ? true : false;
    }
    
    public synchronized boolean havaConsumer() {
        return queue.size() > 0;
    }

    private void saleOut() {
        System.out.println("票卖完了...");
        while(!this.queue.isEmpty())
            System.out.println("第"+ queue.poll() +"个人没买到票生气的走了");
    }
}

class Producer implements Runnable {
    private TicketWindow window;

    public Producer(TicketWindow window) {
        this.window = window;
    }
        
    @Override
    public void run() {
        while(true) {
            if(!window.haveTicket())
                break;
            try {
                Thread.sleep(50);
                window.producer();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

class Consumer implements Runnable {
    private TicketWindow window;

    public Consumer(TicketWindow window) {
        this.window = window;
    }

    @Override
    public void run() {
        while(true) {
            if(!window.haveTicket())
                break;
            try {
                Thread.sleep(50);
                window.consumer();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
```




范例：卖票

定义卖票窗口类
package org.queue.demo;

public class WindowQueue { //卖票的窗口

	//定义卖票队列
	
	int maxSize=10;
	
	MyQueue queue=new MyQueue(maxSize);
	
	int num=0; //最多卖100张票
	
	boolean flag=true ; //判断是否继续卖票
	
	
	//排队买票
	public synchronized void producer()throws Exception{
		
		if(this.queue.count<maxSize) {
			
			this.queue.append(num++); //等待买票的数量++
			System.out.println("第"+num+"个客户排队买票");
			this.notifyAll(); //唤醒等待的线程
		}else {
			
			System.out.println("队列已满 请等待");
			this.wait(); 
		}
	}
	
	
	//卖票
	public synchronized void consumer()throws Exception{
		
		if(this.queue.count>0) {
			
			Object obj=this.queue.delete();  //出队
			int temp=Integer.parseInt(obj.toString());
			System.out.println("第"+(temp+1)+"个客户买到票离开队列");
			
			//如果当前的队列为空 并且卖出票数大于100
			if(this.queue.isEmpty()&&this.num>=100) {
				
				this.flag=false;
			}
			this.notifyAll(); //唤醒等待的线程
		}else {
			
			System.out.println("队列已空 请等待");
			this.wait();
		}
	}
}


package org.queue.demo;

public class Producer implements Runnable{

	WindowQueue queue;
	
	public Producer(WindowQueue queue) {
		
		this.queue=queue;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(queue.num<100) {  //必须小于100张票 才可以买票
		try {
			Thread.sleep(1000);
			queue.producer();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
	}

}



package org.queue.demo;

public class Consumer implements Runnable{
	
	WindowQueue queue;
	
	public Consumer(WindowQueue queue) {
		
		this.queue=queue;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(queue.flag) {  //如果队列为空 并且票数大于100 就不会卖票了
			
			try {
				Thread.sleep(1000);
				queue.consumer();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

}



package org.queue.demo;

public class QueueTest {

	
	public static void main(String[] args) throws Exception {
		
		
		WindowQueue queue=new WindowQueue();
		
		Producer p=new Producer(queue);
		
		Consumer con=new Consumer(queue);
		
		//以上的代码一定要注意 传入的是同一个对象
		
		Thread t1=new Thread(p);
		
		Thread t2=new Thread(con);
		
		
		t1.start();
		
		t2.start();
	}
}


