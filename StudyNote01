[TOC]

#将近2周的学习汇总下:

1. 八个基本数据类型:
byte(-128~127,默认0), short(2字节,默认0), int(4字节默认0), long(8字节,默认0), float(4字节,默认0.0), double(8字节,默认0.0), char(2字节默认\u0000), boolean(一字节,默认false)

2.运算符:

& 和 |:所有条件都会判断
&& 和 ||: 前面的判断条件得出结论后面的条件不会再判断

3.0java命名规范:字母数字_,$,不能用关键字命名


方法重载:方法名相同,方法参数的类型和数量不同,与返回值无关
构造方法:方法名于类名相同,权限只能是 public, private, protected,不能用static修饰
没有定义有参构造方法时系统会默认提供无参的构造方法.定义了就不会提供无参构造,要自己定义.

4.0 权限

1、类的权限修饰符有两个：public, or package-private (no explicit modifier).

    当一个类申明为public时，它对任何地方的类都是可见的。

    当一个类没有申明权限时，即默认设为package-private,它只对在自己的包内的所有类可见。

2、类中成员的权限修饰符有：public, private, protected, or package-private (no explicit modifier).

    当成员申明为public时，它对任何地方的类都是可见的。

    当成员没有申明权限时，即默认设为package-private,它只对在自己的包内的所有类可见。

    当成员申明为private时，它只对本类是可见的。

    当成员申明为protected时，除了对自己所在的包内所有类是可见的还对其他包内的本类的子类是可见的。

3、成员的权限修饰符访问权限

5.0  Tread 和 Runable 以及 Callable

Callable的调用过程:
                               Thread启动
 callableImpl实现类 ->callable接口->FutureTask ->RunnableFuture ->Future    ->Runnable

可以用callableImpl 里面重写call方法,类似于run()重写
然后用类似于runnableImpl的启动方式,通过Thread执行线程
new Thread(new FutureTask<>(new MyThread())).start();
2者调用方法类似,但是callable有返回值,runable没有

6.0hashmap HashTable hashcode()详解


7 抽象类和接口不同
相同点：
接口和抽象类都不能用于创建实例，接口和抽象类中都有抽象方法；

不同点:
1.抽象类可以有构造方法，接口中不能有构造方法。 
2.接口中定义的变量只能是public static final类型。抽象类不一定 
3.接口中所有方法必须都是抽象的。抽象类中可以包含非抽象的普通方法 
4.接口中的抽象方法只能是public，并且默认为public abstract类型,抽象类中的抽象方法的访问类型可以是public, protected，但。 
5.抽象类中可以包含静态方法，接口中不能有。 
6.一个类可以实现多个接口，但只能继承一个抽象类。

Jdk1.8之后:有了默认方法
 default void test() {....
	}

8.Integer: 
Integer n0 = 3;
		Integer n1 = new Integer(3);
		int n3 = 3;
//对于
Integer n0 = 3
            Integer n4 = 3;
  对于Integer 的对象在new或者直接等于一个数字时,只要这2个的数值在-128 ~ 127之间就是直接指向同一个缓存数组(这个数组在Integer类加载的时候就存在了),
所以判断相等:true
如果超过这个范围,就会产生2个新的引用指向自己的内存空间,则会是false

  Integer.valueof(object i)这个方法当里面参数是int时,返回一个新的Integer对象 return new Integer(i);
如果是其他类型会去调用parseint()方法转为int,然后在去调用一次本身
(注意这里Integer.valueof也遵循上面的缓存数组大小原则,在范围内就指向同一个地址,如果超过了就再去返回新的return new Integer(i),这里就是新的对象了)
Integer.valueof(int),返回一新的integer对象

		System.out.println(n0 == n3);//true
		System.out.println(n0 == n1);//false
		System.out.println(n3 == n1);//true
这里体现自动装箱拆箱的机制
当int 和Integer对比时Integer会拆箱转为int,对比为true;
2个Integer对比时就要比较引用地址是否相等.



9.hashcode特点:
（1）HashCode的存在主要是用于查找的快捷性.经常用于确定对象的存储地址，如Hashtable，HashMap等，HashCode。
（2）如果两个对象相同，?equals方法一定返回true，并且这两个对象的HashCode一定相同。
（3）两个对象的HashCode相同，并不一定表示两个对象就相同，即equals()不一定为true，只能够说明这两个对象在一个散列存储结构中。
（4）如果对象的equals方法被重写，那么对象的HashCode也尽量重写。
 HashCode作用
equals方法可用于保证元素不重复，但如果每增加一个元素就检查一次，若集合中现在已经有1000个元素，那么第1001个元素加入集合时，就要调用1000次equals方法。这显然会大大降低效率。?于是，Java采用了哈希表的原理。

哈希算法也称为散列算法，是将数据依特定算法直接指定到一个地址上。

这样一来，当集合要添加新的元素时，先调用这个元素的HashCode方法，就一下子能定位到它应该放置的物理位置上。

（1）如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了。

（2）如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了。

（3）不相同的话，也就是发生了Hash key相同导致冲突的情况，那么就在这个Hash key的地方产生一个链表，将所有产生相同HashCode的对象放到这个单链表上去，串在一起（很少出现）。

这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。

如何理解HashCode的作用：

从Object角度看，JVM每new一个Object，它都会将这个Object丢到一个Hash表中去，这样的
话，下次做Object的比较或者取这个对象的时候（读取过程），它会根据对象的HashCode再
从Hash表中取这个对象。这样做的目的是提高取对象的效率。若HashCode相同再去调用equal
10.0 service 和 intentService
  1.startService启动方式过程及生命周期：
onCreate()–> onStartCommand()/onStart() —> onDestory();

1）创建服务onCreate()在整个生命周期仅执行一次，每次调用服务都会执行onStart()或onStartCommand();

2）停止服务onDestory()在整个生命周期仅执行一次；

3）服务一旦启动，生命周期将不受限于UI线程。应用（Activity）终止，服务仍然在后台运行；

4）直接启动的服务，其它应用不能调用其中的功能。

2.bindService绑定方式过程及生命周期：
onCreate() —> bindService/onBind —> unbindService/onUnbind–> onDestory();
两种启动方式区别：
1.生命周期调用的方法不一样

2.与Activity 生命周期的关系 ：
startService开启服务以后，与activity就没有关联，不受影响，独立运行。ServiceConnection ；bindService开启服务以后，与activity存在关联，退出activity时必须调用unbindService方法，否则会报ServiceConnection泄漏的错误。
IntentService
IntentService 是继承自 Service 并处理异步请求的一个类，在 IntentService 内有一个工作线程来处理耗时操作，当任务执行完后，IntentService 会自动停止，不需要我们去手动结束。如果启动 IntentService 多次，那么每一个耗时操作会以工作队列的方式在 IntentService 的 onHandleIntent 回调方法中执行，依次去执行，执行完自动结束。


11.Arrays.sort()重写
Comparator compareTo 方法重写 ,在一个类中直接实现接口
Comparator compare 在一个类写好后重写写一个类(Testcopare))继承并重写方法 调用Arrays.sort(p1,new Testcopare)

12.多线程相关的概念
进程是程序在计算机上的一次执行活动
线程是可执行代码的可分派单元。

1. synchronized原理
在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存
在,当我们调用某对象的synchronized方法时，就获取了该对象的同步锁。

2. synchronized基本规则
在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存在。

第一条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的该“synchronized方法”或者“synchronized代码块”的访问将被阻塞。
注意:::是对同一个对象的访问同步锁才会实现互斥操作

第二条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized

代码块”时，其他线程仍然可以访问“该对象”的非同步代码块。其他线程对“该对

象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞

To be continnue...


